# 工作流的名称
name: Publish Docker image to GHCR

# 触发工作流的事件
on:
  push:
    # 仅在推送到 main 分支时触发
    branches:
      - main
    # 仅在推送 'v*.*.*' 格式的标签时触发 (例如 v1.0.0)
    tags:
      - 'v*.*.*'

# 环境变量，方便在多处复用
env:
  REGISTRY: ghcr.io
  # 镜像名称将是 ghcr.io/your-username/your-repo
  IMAGE_NAME: ${{ github.repository }}

# 工作流包含一个名为 'build-and-push' 的作业
jobs:
  build-and-push:
    # 作业运行在最新的 Ubuntu 虚拟机上
    runs-on: ubuntu-latest
    # 为此作业授予特定的权限
    permissions:
      contents: read       # 允许检出代码
      packages: write     # 允许推送到 ghcr.io
      
    steps:
      # 步骤1: 检出你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2: 登录到 GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # github.actor 是触发工作流的用户名
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN 是由 GitHub Actions 自动生成的

      # 步骤3: 提取 Docker 元数据 (如标签和标注)
      # 这一步非常智能：
      # - 当你推送到 main 分支时，它会自动生成 'latest' 标签
      # - 当你推送 git 标签 (如 v1.1.0) 时，它会自动生成 '1.1.0' 标签
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # 步骤4: 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # 使用当前目录作为构建上下文
          push: true # 确认执行推送操作
          tags: ${{ steps.meta.outputs.tags }} # 使用上一步生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用上一步生成的标注
