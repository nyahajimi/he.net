# 工作流名称，会显示在 GitHub Actions 页面
name: Build and Push Docker Image to GHCR

# 触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches:
      - 'main'
  # 允许手动触发
  workflow_dispatch:

# 定义工作流中的任务
jobs:
  build-and-push:
    # 任务运行的环境
    runs-on: ubuntu-latest
    
    # 为此任务设置权限，这是将镜像推送到 GHCR 的关键
    permissions:
      contents: read       # 读取仓库内容的权限
      packages: write      # 写入（推送）GitHub Packages 的权限

    steps:
      # 第一步：检出代码
      # actions/checkout 是官方提供的动作，用于将仓库代码拉取到 runner 环境中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：登录到 GitHub Container Registry (GHCR)
      # 使用 docker/login-action 动作，并通过 GITHUB_TOKEN 安全地进行身份验证
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # github.repository_owner 是一个变量，代表仓库的所有者（您的用户名或组织名）
          username: ${{ github.repository_owner }}
          # GITHUB_TOKEN 是由 GitHub Actions 自动生成的临时令牌，具有推送权限
          password: ${{ secrets.GITHUB_TOKEN }}

      # 第三步：提取 Docker 元数据（如标签和镜像名称）
      # 使用 docker/metadata-action 自动生成镜像名称和标签，使工作流更具可维护性
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # ghcr.io/OWNER/REPO 的格式
          images: ghcr.io/${{ github.repository }}
          # 明确指定我们只需要 'latest' 标签
          tags: type=raw,value=latest

      # 第四步：构建并推送 Docker 镜像
      # 使用 docker/build-push-action 执行构建和推送操作
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Dockerfile 的上下文路径（. 代表仓库根目录）
          context: .
          # 推送到 GHCR
          push: true
          # 使用上一步生成的标签（即 'latest'）
          tags: ${{ steps.meta.outputs.tags }}
          # 使用上一步生成的标签（可选，但推荐）
          labels: ${{ steps.meta.outputs.labels }}
          # 启用构建缓存，大幅提升后续构建速度
          cache-from: type=gha
          cache-to: type=gha,mode=max
