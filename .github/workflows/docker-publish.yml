# 工作流名称，会显示在 GitHub Actions 页面
name: Build and Push Docker Image to GHCR

# 触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches:
      - 'main'
  # 允许手动触发
  workflow_dispatch:

# 定义工作流中的任务
jobs:
  build-and-push:
    # 任务运行的环境
    runs-on: ubuntu-latest
    
    # 为此任务设置权限，这是将镜像推送到 GHCR 的关键
    permissions:
      contents: read       # 读取仓库内容的权限
      packages: write      # 写入（推送）GitHub Packages 的权限

    steps:
      # 第一步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：登录到 GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 第三步：【新增的步骤】设置 Docker Buildx
      # 这是解决缓存问题的关键。它会创建一个支持高级功能的 builder 实例。
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 第四步：提取 Docker 元数据（如标签和镜像名称）
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: type=raw,value=latest

      # 第五步：构建并推送 Docker 镜像
      # 现在的构建环境已经支持 gha 缓存了
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # 现在这两行可以正常工作了
          cache-from: type=gha
          cache-to: type=gha,mode=max
